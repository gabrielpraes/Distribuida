# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import distributed_printing_pb2 as distributed__printing__pb2


class PrintingServiceStub(object):
    """Serviço para o servidor de impressão BURRO (implementado no servidor)
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SendToPrinter = channel.unary_unary(
                '/distributed_printing.PrintingService/SendToPrinter',
                request_serializer=distributed__printing__pb2.PrintRequest.SerializeToString,
                response_deserializer=distributed__printing__pb2.PrintResponse.FromString,
                )


class PrintingServiceServicer(object):
    """Serviço para o servidor de impressão BURRO (implementado no servidor)
    """

    def SendToPrinter(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_PrintingServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SendToPrinter': grpc.unary_unary_rpc_method_handler(
                    servicer.SendToPrinter,
                    request_deserializer=distributed__printing__pb2.PrintRequest.FromString,
                    response_serializer=distributed__printing__pb2.PrintResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'distributed_printing.PrintingService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class PrintingService(object):
    """Serviço para o servidor de impressão BURRO (implementado no servidor)
    """

    @staticmethod
    def SendToPrinter(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/distributed_printing.PrintingService/SendToPrinter',
            distributed__printing__pb2.PrintRequest.SerializeToString,
            distributed__printing__pb2.PrintResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class MutualExclusionServiceStub(object):
    """Serviço para comunicação entre CLIENTES (implementado nos clientes)
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.RequestAccess = channel.unary_unary(
                '/distributed_printing.MutualExclusionService/RequestAccess',
                request_serializer=distributed__printing__pb2.AccessRequest.SerializeToString,
                response_deserializer=distributed__printing__pb2.AccessResponse.FromString,
                )
        self.ReleaseAccess = channel.unary_unary(
                '/distributed_printing.MutualExclusionService/ReleaseAccess',
                request_serializer=distributed__printing__pb2.AccessRelease.SerializeToString,
                response_deserializer=distributed__printing__pb2.Empty.FromString,
                )


class MutualExclusionServiceServicer(object):
    """Serviço para comunicação entre CLIENTES (implementado nos clientes)
    """

    def RequestAccess(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReleaseAccess(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MutualExclusionServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'RequestAccess': grpc.unary_unary_rpc_method_handler(
                    servicer.RequestAccess,
                    request_deserializer=distributed__printing__pb2.AccessRequest.FromString,
                    response_serializer=distributed__printing__pb2.AccessResponse.SerializeToString,
            ),
            'ReleaseAccess': grpc.unary_unary_rpc_method_handler(
                    servicer.ReleaseAccess,
                    request_deserializer=distributed__printing__pb2.AccessRelease.FromString,
                    response_serializer=distributed__printing__pb2.Empty.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'distributed_printing.MutualExclusionService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class MutualExclusionService(object):
    """Serviço para comunicação entre CLIENTES (implementado nos clientes)
    """

    @staticmethod
    def RequestAccess(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/distributed_printing.MutualExclusionService/RequestAccess',
            distributed__printing__pb2.AccessRequest.SerializeToString,
            distributed__printing__pb2.AccessResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ReleaseAccess(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/distributed_printing.MutualExclusionService/ReleaseAccess',
            distributed__printing__pb2.AccessRelease.SerializeToString,
            distributed__printing__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
